工作区（working directory）：就是你在电脑里能看到的目录。(add 之前在工作区，之后在暂存区，commit -m 之后在版本库)
暂存区(stage)：英文叫stage, 或index。一般存放在 ".git目录下" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。
版本库(repository)：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库


git 初始化:在需要进行版本控制的文件夹下，例如 d/phpstudy/PHPTutorial/WWW/gittest
git init   （会生成一个.git的文件夹，也可以git init newrepo 相当于当前目录下创建了一个目录，并在创建的目录下初始化git）

因为Git是分布式版本控制系统，所以，每个机器自报家门
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
也可以 git config --global --edit,后会进入到一个vim的编辑页面，然后修改里面的name和email

也可以查询是否已经定义名字和邮箱了，如下：
$ git config user.name
$ git config user.email

git add *  把工作区的所有文件添加到暂存区 (也可以写 git add 1.txt  把具体的某一个文件提交)
git status 查询当前的文件/文件夹的提交状态
git commit -m '写评论内容'  把暂存区的文件提交到本地版本库，并备注上评论



版本日志和回退：
git log  显示从近到远的提交日志历史
git log --pretty=oneline  加上后面的参数，显示的是一行简短的信息，看到的一大串的数字加字母是commit id(版本号)，
使用sha1计算出来的非常大的数字用十六位进制表示的，如下：
ebafa4207514c35b8feb74514d2a0ac386f63552 (HEAD -> master) modify
b6b2aa69491f7b1d65e574f45570f73b1306c7a4 测试3
3c9626c6caec0e889bda25b9800237f82e55fed2 测试
HEAD表示当前的版本，也就是当前最新提交的，上一个版本就是HEAD^ 上上一个版本HEAD^^ ,如果往上很多，可以写成HEAD~100，例如下：

git reset --hard HEAD^ 上一个版本
此时再用git log会发现版本回到上一个之后，之前的那个没有了，如果还想回到那个版本，只要git窗口命令还没关，就可以重新设置，如下:
git reset --hard ebafa420 执行命令后就会回到想要的版本
git reflog 显示从近到远的命令日志历史，如果命令窗口关了可以用此查看命令历史找到之前命令的版本号，再回到想要的版本号

小结：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
